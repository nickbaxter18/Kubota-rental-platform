{
  "name": "kubota-rental-platform",
  "version": "1.0.0",
  "description": "Monorepo for Kubota SVL-75 Rental Platform",
  "private": true,
  "type": "module",
  "packageManager": "pnpm@9.12.0",
  "engines": {
    "node": ">=20.0.0",
    "pnpm": ">=9.0.0"
  },
  "scripts": {
    "install:all": "pnpm install",
    "build": "pnpm --recursive --parallel run build",
    "dev": "pnpm --parallel --filter frontend run dev",
    "dev:backend": "pnpm --filter backend run start:dev",
    "dev:frontend": "pnpm --filter frontend run dev",
    "start": "pnpm --parallel run start",
    "lint": "pnpm --recursive --parallel run lint",
    "lint:fix": "pnpm --recursive --parallel run lint --fix",
    "test": "pnpm --recursive --parallel run test",
    "test:watch": "pnpm --recursive --parallel run test:watch",
    "test:smoke": "pnpm --filter frontend run build && pnpm --filter backend run build",
    "test:coverage": "pnpm --recursive --parallel run test:coverage",
    "test:coverage:frontend": "pnpm --filter frontend run test:coverage",
    "test:coverage:backend": "pnpm --filter backend run test:coverage",
    "test:coverage:report": "pnpm test:coverage && open coverage/lcov-report/index.html",
    "test:coverage:check": "pnpm test:coverage -- --coverageReporters=json && node scripts/coverage-check.js",
    "test:accessibility": "pnpm --filter frontend run test:e2e --config=playwright.config.ts --project=accessibility",
    "test:visual-regression": "pnpm --filter frontend run test:e2e --config=playwright.config.ts --project=visual-regression",
    "test:performance": "pnpm --filter frontend run test:e2e --grep='performance'",
    "test:critical": "pnpm --filter backend run test:critical",
    "test:integration": "pnpm --recursive run test:integration",
    "test:health": "node scripts/test-health-report.js",
    "validate:environment": "bash scripts/test-infrastructure-validator.sh",
    "validate:health": "pnpm validate:environment && pnpm test:health",
    "validate:dependencies": "node scripts/dependency-consistency-validator.js",
    "test:flaky": "node scripts/flaky-test-detector.js",
    "test:redis:start": "bash scripts/start-test-redis.sh",
    "test:redis:stop": "bash scripts/stop-test-redis.sh",
    "test:with-redis": "pnpm test:redis:start && pnpm test && pnpm test:redis:stop",
    "ci:download-artifacts": "bash scripts/download-ci-artifacts.sh",
    "monitor": "node scripts/monitoring-alerts.js run",
    "monitor:setup": "node scripts/monitoring-alerts.js setup",
    "test:all": "node scripts/test-runner.js all",
    "test:debug": "node scripts/test-runner.js debug",
    "test:setup": "node scripts/test-runner.js --setup",
    "type-check": "pnpm --recursive --parallel run type-check",
    "prepare": "husky install",
    "ci": "pnpm lint && pnpm type-check && pnpm test:smoke",
    "clean": "pnpm --recursive --parallel run clean && rm -rf node_modules .pnpm-debug.log",
    "db:migrate": "pnpm --filter backend run migration:run",
    "db:seed": "pnpm --filter backend run seed",
    "docker:build": "docker-compose build",
    "docker:up": "docker-compose up -d",
    "docker:down": "docker-compose down",
    "format": "prettier --write \"**/*.{ts,tsx,js,jsx,json,md}\"",
    "format:check": "prettier --check \"**/*.{ts,tsx,js,jsx,json,md}\"",
    "cache:clean": "pnpm store prune && pnpm install --frozen-lockfile"
  },
  "devDependencies": {
    "@types/node": "^24.6.1",
    "@vitest/coverage-v8": "^3.2.4",
    "@vitest/ui": "^3.2.4",
    "c8": "^10.1.3",
    "husky": "^9.1.7",
    "istanbul-lib-coverage": "^3.2.2",
    "jest-junit": "^16.0.0",
    "lint-staged": "^16.2.3",
    "prettier": "^3.3.3",
    "ts-jest": "29.4.4",
    "turbo": "^2.2.3",
    "typescript": "^5.9.3"
  },
  "pnpm": {
    "overrides": {
      "react": "^19.1.1",
      "react-dom": "^19.1.1",
      "next": "^15.5.4",
      "@types/react": "^19.1.16",
      "@types/react-dom": "^19.1.9"
    },
    "peerDependencyRules": {
      "allowAny": [
        "react",
        "react-dom",
        "@types/react",
        "@types/react-dom"
      ],
      "ignoreMissing": [
        "@types/*"
      ]
    },
    "cacheDir": ".pnpm-cache",
    "shamefullyHoist": false,
    "enablePnp": false,
    "resolutionMode": "highest",
    "autoInstallPeers": true,
    "dedupePeerDependents": true,
    "strictPeerDependencies": false,
    "excludeLinksFromLockfile": false
  },
  "lint-staged": {
    "*.{ts,tsx,js,jsx}": [
      "eslint --fix",
      "prettier --write"
    ],
    "*.{json,md,css,scss}": [
      "prettier --write"
    ]
  }
}
