---
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-config
  namespace: production
data:
  NODE_ENV: "production"
  NEXT_PUBLIC_API_BASE: "https://api.udigit-rentals.com"
  LOG_LEVEL: "info"
  PORT: "3000"
---
apiVersion: v1
kind: Secret
metadata:
  name: frontend-secrets
  namespace: production
type: Opaque
data:
  sentry-dsn: "aHR0cHM6Ly9zZW50cnk="  # base64 encoded
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-production
  namespace: production
  labels:
    app: frontend
    environment: production
    version: "1.0.0"
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: frontend
      environment: production
  template:
    metadata:
      labels:
        app: frontend
        environment: production
        version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: frontend
        image: ghcr.io/nickbaxter18/kubota-rental-platform/frontend:latest
        ports:
        - containerPort: 3000
          name: http
          protocol: TCP
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: frontend-config
              key: NODE_ENV
        - name: NEXT_PUBLIC_API_BASE
          valueFrom:
            configMapKeyRef:
              name: frontend-config
              key: NEXT_PUBLIC_API_BASE
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: frontend-config
              key: LOG_LEVEL
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: frontend-config
              key: PORT
        - name: SENTRY_DSN
          valueFrom:
            secretKeyRef:
              name: frontend-secrets
              key: sentry-dsn
        livenessProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "sleep 10"]
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      securityContext:
        fsGroup: 2000
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-production
  namespace: production
  labels:
    app: frontend
    environment: production
spec:
  selector:
    app: frontend
    environment: production
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  type: ClusterIP
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: frontend-pdb
  namespace: production
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: frontend
      environment: production
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: production-ingress
  namespace: production
  annotations:
    kubernetes.io/ingress.class: "alb"
    alb.ingress.kubernetes.io/scheme: "internet-facing"
    alb.ingress.kubernetes.io/target-type: "ip"
    alb.ingress.kubernetes.io/healthcheck-protocol: "HTTP"
    alb.ingress.kubernetes.io/healthcheck-path: "/health"
    alb.ingress.kubernetes.io/healthcheck-port: "traffic-port"
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
    alb.ingress.kubernetes.io/ssl-redirect: "443"
    external-dns.alpha.kubernetes.io/hostname: "udigit-rentals.com,api.udigit-rentals.com"
spec:
  tls:
  - hosts:
    - "udigit-rentals.com"
    - "api.udigit-rentals.com"
    secretName: production-tls
  rules:
  - host: "udigit-rentals.com"
    http:
      paths:
      - path: "/"
        pathType: "Prefix"
        backend:
          service:
            name: frontend-production
            port:
              number: 80
  - host: "api.udigit-rentals.com"
    http:
      paths:
      - path: "/"
        pathType: "Prefix"
        backend:
          service:
            name: backend-production
            port:
              number: 80
