# .github/workflows/quality-gate.yml
name: Quality Gate
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '9'

jobs:
  # Comprehensive quality validation
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    timeout-minutes: 15

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: udigit_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up locale
        run: |
          sudo locale-gen en_US.UTF-8
          echo 'LC_ALL=en_US.UTF-8' >> $GITHUB_ENV
          echo 'LANG=en_US.UTF-8' >> $GITHUB_ENV
          echo 'LANGUAGE=en_US.UTF-8' >> $GITHUB_ENV

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Wait for database
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for database..."
            sleep 2
          done

      - name: Run database migrations
        run: pnpm --filter backend run migration:run
        env:
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/udigit_test

      - name: Run critical path tests first
        run: pnpm run test:critical
        env:
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/udigit_test
          REDIS_URL: redis://localhost:6379

      - name: Run unit tests with coverage
        run: pnpm run test:coverage
        env:
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/udigit_test
          REDIS_URL: redis://localhost:6379

      - name: Run integration tests
        run: pnpm run test:integration
        env:
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/udigit_test
          REDIS_URL: redis://localhost:6379

      - name: Performance regression check
        run: pnpm run test:performance
        env:
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/udigit_test

      - name: Accessibility compliance check
        run: pnpm run test:accessibility

      - name: Lighthouse CI Performance Check
        run: |
          cd frontend
          npx @lhci/cli@0.12.x autorun --upload.target=temporary-public-storage
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Security audit
        run: pnpm audit --audit-level high

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: quality-gate
          name: quality-gate-coverage

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: quality-gate-results
          path: |
            coverage/
            frontend/test-results/
            backend/coverage/
            backend/test-results/
          retention-days: 30

      - name: Upload JUnit test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: junit-reports
          path: |
            backend/test-results/junit.xml
            frontend/test-results.xml
          retention-days: 7

  # Notify on quality gate status
  quality-notification:
    name: Quality Gate Notification
    runs-on: ubuntu-latest
    needs: quality-gate
    if: always()

    steps:
      - name: Notify success
        if: needs.quality-gate.result == 'success'
        run: |
          echo "✅ Quality gate passed successfully"

      - name: Notify failure
        if: needs.quality-gate.result == 'failure'
        run: |
          echo "❌ Quality gate failed - blocking deployment"
          # TODO: Add Slack notification here
